importScripts(
  'https://storage.googleapis.com/workbox-cdn/releases/6.1.5/workbox-sw.js',
);

workbox.setConfig({
  debug: true,
});

// Added the following 3 statements based on entry 15th May here. 
// https://github.com/nuxt-community/pwa-module/issues/176
// Seems to be more stable and reliable
// Start controlling any existing clients as soon as it activates
workbox.core.clientsClaim()

// Skip over the SW waiting lifecycle stage
self.skipWaiting()

workbox.precaching.cleanupOutdatedCaches()

// This will trigger the importScripts() for workbox.strategies and its dependencies:
const {registerRoute} = workbox.routing;
const {NetworkFirst, StaleWhileRevalidate, CacheFirst } = workbox.strategies;
const {CacheableResponse, CacheableResponsePlugin} = workbox.cacheableResponse;
const {ExpirationPlugin} = workbox.expiration;

// List of routes to be cached
const matchOffLineAvailable = ({url, request, event}) => {
  console.log('matchOffLineAvailable', url, request, event);
  //console.log((url.pathname === '/users' || url.pathname === '/' || url.pathname === '/schedules'));
  return (url.pathname === '/users' || url.pathname === '/schedules' || url.pathname === '/');
};

// Loading pages (and turbolinks requests), checks the network first, then the cache
// Having trouble with this one on first page load.  It seems to be working on subsequent page refreshes only.
<%# registerRoute(
  ({request}) => request.destination === "document" || (
    request.destination === "" &&
    request.mode === "cors" &&
    request.headers.get('Turbolinks-Referrer') !== null
  ),
  new NetworkFirst({
    cacheName: 'documents',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 5,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
); %>

registerRoute(
  matchOffLineAvailable,
  new NetworkFirst({
    cacheName: 'documents',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 5,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Load CSS & JS from the Cache
registerRoute(
  ({request}) => request.destination === "script" ||
  request.destination === "style",
  new CacheFirst({
    cacheName: 'assets-styles-and-scripts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);
